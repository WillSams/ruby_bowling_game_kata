///////////////////////////////////////////////////////////////////////////////
// Let's get started:
///////////////////////////////////////////////////////////////////////////////
1.  Execute rspec in the command-line.  You should see '0 examples, 0 failures'

2.  Write your first test checking for the existence of a new game.  Don't create
   the game class yet, we want this to fail without it first.  Then create a blank game class.

require 'spec_helper'
require_relative '../app/game'

describe Game do
  before :each do
    @game = Game.new
  end

  describe "#new" do
      it "takes 0 parameters and returns a Game object" do
          expect(@game).to be_an_instance_of Game
      end
  end
end

2.  Next, let's test the roll() and score() method:
      * roll is called each time the player rolls, taking pins knocked down as an arg.
      * score is called at end of game and returns the total score
    to your spec class
    ------------------
    describe "#roll" do
      it "bowler rolled a straight gutter game" do
        20.times { @game.roll(0) }
        expect(@game.score).to equal 0
      end
    end

    to game class
    --------------
    def roll(pins)
    def

    def score
      return -1  #change to 0 to make this pass
    end

3.  Let's implement the roll/score methods a bit more:
    Add to #roll description
    ------------------------
    describe "#roll" do
      .....

      it "bowler knocked down 1 pin each roll" do
        20.times { @game.roll(1) }
        expect(@game.score).to equal 20
      end
    end

    Add/change in Game class
    -----------------------
    def initialize
      @total_score = 0
    end

    def roll(pins)
       @total_score += pins
    end

    def score
      @total_score
    end

4. At this point, we can see a logic problem.  The methods roll() and score() are failing
    the Single Responsibility Principle.
      * roll looks like it is calculating score so that's not good
      * score just returning the score that roll calculated :/
    Refactor Game class
    -------------------
    def initialize
      @rolls = Array.new(21, 0)
      @current_roll = 0
    end

    def roll(pins)
      @rolls[@current_roll] = pins
      @current_roll = @current_roll + 1
    end

    def score
      total_score = 0
      @rolls.each do |item|
        total_score += item
      end
      total_score
    end

5.  Next, right a test taking spare scoring into account.

    Add to #roll description
    -------------------------
    it "bowler only rolled a spare plus 3" do
      @game.roll(5)
      @game.roll(5)               #spare strike!
      @game.roll(3)
      17.times { @game.roll(0)}   #other 17 rolls were duds for a 20 roll game
      expect(@game.score).to equal 16
    end

    Modify score method in the Game class implementing basic frames
    --------------------------------------------------------------
    def score
      total_score = 0
      frame_index = 0

      10.times do  #10 frames
        if spare?(frame_index)
          total_score += 10 + @rolls[frame_index + 2]
          frame_index +=2
        else
          total_score += @rolls[frame_index] + @rolls[frame_index + 1]
          frame_index += 2
        end
      end
      total_score
    end

    private
      def spare?(frame_index)
        @rolls[frame_index] + @rolls[frame_index + 1] == 10
      end

6.  Let's start implementing the strike logic.  First let's right a spec:

    Add to #roll description
    -------------------------
    if "bowlers rolled a strike, then x and xx" do
      @game.roll(10)
      @game.roll(3)
      @game.roll(4)
      17.times { @game.roll(0)}
      expect(@game.score).to equal 24
    end

    That should fail.  Now, let's refactor our Game class.
    Modify score method
    -------------------
    def score
      total_score = 0
      frame_index = 0

      10.times do  #10 frames
        if strike?(frame_index)
          total_score += 10 + @rolls[frame_index+1] + @rolls[frame_index+2]
          frame_index += 1
        elsif spare?(frame_index)
          total_score += 10 + @rolls[frame_index + 2]
          frame_index +=2
        else
          total_score += @rolls[frame_index] + @rolls[frame_index + 1]
          frame_index += 2
        end
      end
      total_score
    end

    private
      def strike?(frame_index)
        @rolls[frame_index] == 10
      end

7.  Everything passed, but let's refactor score().

    Modify Game class
    -----------------
    def score
      total_score = 0
      frame_index = 0

      10.times do  #10 frames
        if strike?(frame_index)
          total_score += strike_bonus(frame_index)
          frame_index += 1
        elsif spare?(frame_index)
          total_score += spare_bonus(frame_index)
          frame_index +=2
        else
          total_score += sum_of_pins_down_in_frame(frame_index)
          frame_index += 2
        end
      end
      total_score
    end

    private
      def spare?(frame_index)
        @rolls[frame_index] + @rolls[frame_index + 1] == 10
      end

      def strike?(frame_index)
        @rolls[frame_index] == 10
      end

      def spare_bonus(frame_index)
        10 + @rolls[frame_index + 2]
      end

  def strike_bonus(frame_index)
    10 + @rolls[frame_index+1] + @rolls[frame_index+2]
  end

  def sum_of_pins_down_in_frame(frame_index)
    @rolls[frame_index] + @rolls[frame_index + 1]
  end

8.  Now it's time to right the last test for a perfect game bowled.  This should be...perfect!

    Add to #roll description
    -------------------------
    it "bowler rolled a perfect game" do
      20.times { @game.roll(10)}
      expect(@game.score).to equal 300
    end
